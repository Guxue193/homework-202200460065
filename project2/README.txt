 数字图像水印技术实验报告

 一、实验目的
- 深入理解并掌握基于离散余弦变换（DCT）的鲁棒性水印嵌入与提取原理及实现方法
- 熟悉基于最低有效位（LSB）的空域水印技术的核心机制与操作流程
- 通过对比两种水印方法在不同攻击条件下的表现，分析其各自的优势与局限性
- 学会运用Python编程语言及OpenCV库实现数字图像水印的完整处理流程

 二、实验原理

 （一）DCT域鲁棒性水印技术
嵌入机制：
1. 将文本形式的水印信息转换为二进制比特流
2. 对图像进行分块DCT变换，选取8×8子块中的中频系数（如位置(3,2)和(2,3)）作为嵌入载体
3. 通过调整两个中频系数的差值来编码二进制信息（1或0）
4. 采用冗余嵌入策略，每个比特信息多次嵌入，并通过随机位置选择实现信息分散存储

提取机制：
1. 对含水印图像进行分块DCT变换，提取选定中频系数的差值
2. 运用多数投票算法对多次嵌入的同一比特信息进行决策，恢复原始比特
3. 将二进制比特流转换为文本形式的水印信息

鲁棒性保障：
通过冗余嵌入和多数投票机制，有效抵抗水平翻转、平移、裁剪、对比度调整等常见图像处理操作带来的影响

 （二）LSB空域水印技术
嵌入机制：
1. 将文本水印转换为二进制比特流
2. 在图像的红色（R）通道中，逐像素修改其最低有效位（LSB）以嵌入比特信息
3. 保持高7位像素值不变，仅修改最低位，减少视觉可见性

提取机制：
1. 从图像红色通道的每个像素中提取最低有效位，重组为二进制比特流
2. 将比特流解码为原始文本水印

技术特点：
- 优势：算法实现简单直观，计算复杂度低，对图像视觉质量影响较小
- 劣势：抗攻击能力弱，尤其对图像压缩、滤波、量化等操作敏感

 三、实验环境
硬件配置：个人计算机（Intel Core i5处理器，8GB内存）

软件环境：
- 操作系统：Windows 10
- 编程语言：Python 3.8
- 依赖库：OpenCV（opencv-python）、NumPy
- 开发工具：PyCharm集成开发环境

 四、实验步骤

 （一）DCT鲁棒性水印实验
1. 水印嵌入过程：
   - 调用`embed_watermark_robust`函数，将文本水印嵌入灰度图像
   - 配置关键参数：冗余嵌入次数（redundancy）、系数修改强度（strength）
   - 保存生成的含水印图像

2. 水印提取过程：
   - 调用`extract_watermark_robust`函数，从含水印图像中提取水印
   - 设置参数：原始水印文本长度、冗余嵌入次数
   - 验证提取结果与原始水印的一致性

3. 攻击测试流程：
   - 对含水印图像施加多种攻击：水平翻转、平移、裁剪、对比度拉伸
   - 使用专用攻击函数（如`_flip_horizontally`、`_translate`等）处理图像
   - 对攻击后的图像执行水印提取操作，记录提取结果

 （二）LSB空域水印实验
1. 水印嵌入过程：
   - 调用`embed_lsb`函数，将文本水印嵌入BGR图像的红色通道
   - 保存含水印图像（推荐使用PNG格式以减少压缩损失）

2. 水印提取过程：
   - 调用`extract_lsb`函数，从含水印图像中提取文本水印
   - 设置参数：原始水印文本长度
   - 验证提取结果的准确性

3. 攻击测试流程：
   - 对含水印图像施加相同类型的攻击：水平翻转、平移、裁剪、对比度拉伸
   - 使用攻击函数（如`attack_flip`、`attack_translate`等）生成攻击样本
   - 提取攻击后图像中的水印，分析提取结果的完整性

 五、实验结果与分析

 （一）DCT鲁棒性水印实验结果
1. 无攻击场景：
   - 嵌入效果：将文本"Hidden123"成功嵌入原始图像，生成的含水印图像与原图视觉差异微小
   - 提取结果：从含水印图像中完整提取出"Hidden123"，与原始水印完全一致

2. 攻击场景测试：
   - 水平翻转攻击：提取结果仍为"Hidden123"，鲁棒性表现良好
   - 平移攻击：提取结果准确，未出现信息丢失
   - 裁剪攻击：尽管图像部分区域被切除，仍能完整提取水印
   - 对比度拉伸攻击：水印提取结果完整，未受对比度调整影响

分析：DCT域水印通过中频系数修改、冗余嵌入和多数投票机制，展现出对常见图像攻击的强抵抗能力。即使图像经历几何变换或灰度调整，水印信息仍能被准确恢复。

 （二）LSB空域水印实验结果
1. 无攻击场景：
   - 嵌入效果：文本"Hidden123"成功嵌入，含水印图像与原图几乎无视觉差异
   - 提取结果：完整提取出原始水印文本，准确率100%

2. 攻击场景测试：
   - 水平翻转攻击：提取结果正确，水印完整
   - 平移攻击：未影响水印提取，结果准确
   - 裁剪攻击：根据裁剪区域大小，可能导致部分水印信息丢失
   - 对比度拉伸攻击：提取结果出现错误，部分字符无法识别

分析：LSB水印对不改变像素值最低位的攻击（如翻转、平移）具有一定抵抗能力，但对影响像素值的操作（如对比度拉伸）非常敏感，这是由于像素值的改变直接破坏了隐藏在最低位的信息。

 六、结论
 两种水印技术对比分析
| 特性 | DCT鲁棒性水印 | LSB空域水印 |
|------|--------------|------------|
| 鲁棒性 | 强，能抵抗多种常见攻击 | 弱，对像素值修改敏感 |
| 实现复杂度 | 较高，涉及DCT变换与系数调整 | 较低，直接操作像素最低位 |
| 计算开销 | 较大，需进行频域变换 | 较小，仅需简单位操作 |
| 视觉影响 | 微小，合理调整系数可控制失真 | 极小，人眼难以察觉差异 |

 应用场景建议
- DCT鲁棒性水印：适用于对安全性和抗攻击能力要求较高的场景，如数字版权保护、图像溯源认证等
- LSB空域水印：适用于对实时性要求高、攻击风险低的场景，如内部文档追踪、简单信息隐藏等

 七、参考文献
- Gonzalez, R. C., & Woods, R. E. (2008). Digital Image Processing (3rd ed.). Pearson.
- OpenCV官方文档. 检索自OpenCV官方网站
- 数字水印技术综述. 中国图像图形学报